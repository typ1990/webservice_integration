<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:stream="http://www.springframework.org/schema/integration/stream"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                           http://www.springframework.org/schema/integration
						   http://www.springframework.org/schema/integration/spring-integration-4.2.xsd
						   http://www.springframework.org/schema/integration/stream
						   http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd">

    <!--Http Response UTF-8 MessageConverter-->
    <int:gateway id="simpleGateway"
                 service-interface="com.cn.service.Cafe"
                  />
    <!--  订单Channel  -->
    <int:channel id="orders">
        <int:queue/>
    </int:channel>
    <!--  实现Splitter模式, 接收 orders队列的消息，调用orderSplitter Bean的split方法，进行消息的分解
    并把分解后的消息，发送到drinks队列.
      -->

    <int:splitter  input-channel ="orders"  ref ="orderSplitter"  method ="split"  output-channel ="drinks">
        <int:poller fixed-delay="10" time-unit="MILLISECONDS" max-messages-per-poll="5" />
    </int:splitter>
    <!--  饮料订单Channel，处理饮料的类别  -->
    <int:channel  id ="drinks" />
    <!--  实现Router模式，接收 drinks队列的消息, 并触发 drinkRouter Bean的 resolveOrderItemChannel方法
       由在 resolveOrderItemChannel该方法的返回值(String-队列名称)表示把消息路由到那个队列上
    -->
    <int:router input-channel ="drinks"  ref ="drinkRouter"  method ="resolveOrderItemChannel" />
    <!--  冷饮生产Channel 最大待处理的数据量为 10 -->
    <int:channel  id ="coldDrinks" >
        <!--<int:queue  capacity ="10" />-->
    </int:channel>
    <!--  定义一个服务处理器，其作用是定义一个消息接收队列 codeDrinks,一但收到消息，则
       触发 barista Bean的 prepareColdDrink方法， 再把 prepareColdDrink方法的值，封成Message的
       payLoad属性，把消息再发送到preparedDrinks队列,  -->
    <int:service-activator  input-channel ="coldDrinks"  ref ="barista"
                         method ="prepareColdDrink"  output-channel ="preparedDrinks" />
    <!--  热饮生产Channel 最大待处理的数据量为 10 -->
    <int:channel  id ="hotDrinks" >
        <!--<int:queue  capacity ="10" />-->
    </int:channel >
    <!--  定义一个服务处理器，其作用是定义一个消息接收队列 hotDrinks,一但收到消息，则
       触发 barista Bean的 prepareHotDrink 再把 prepareColdDrink方法的值，封成Message的
       payLoad属性，把消息再发送到preparedDrinks队列,  -->
    <int:service-activator  input-channel ="hotDrinks"  ref ="barista"
                         method ="prepareHotDrink"  output-channel ="preparedDrinks" />
    <!--  定义最终进行生产的消息队列  -->
    <int:channel  id ="preparedDrinks" />
    <!--  实现 aggregator 模式, 接收 preparedDrinks 消息, 并触发 waiter Bean的prepareDelivery方法
     再把处理好的数据，发送到 deliveries队列  -->
    <int:aggregator  input-channel ="preparedDrinks"  ref ="waiter"
                  method ="prepareDelivery"  output-channel ="deliveries" />

    <!--  定义一个 stream 适配器，接收 deliveries队列的消息后，直接输出到屏幕 -->

    <stream:stdout-channel-adapter  id ="deliveries" />

    <bean  id ="orderSplitter"
                  class ="com.cn.service.OrderSplitter" />

    <bean  id ="drinkRouter"
                  class ="com.cn.service.DrinkRouter" />

    <bean  id ="barista"  class ="com.cn.service.Barista" />

    <bean  id ="waiter"  class ="com.cn.service.Waiter" />

</beans>